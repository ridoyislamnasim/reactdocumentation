====================================================
useReducer
reducer = make small
====================================================
== javaScript reducer
 const array = [1, 2, 3, 4, 5]
 const reducerFunction = (accumulator, currentValue) => accumulator + currentValue;
 //accumultor = prev stage result
 //currentValue = present value
 //reduce(function name, initial Value)
 console.log(array.reduce(reducerFunction) // 10
 console.log(array.reduce(reducerFunction, 5) // 5 + 10 =15


== in React
useReducer(function name, initial state)
newStste = function(current State, action)
return a tuple (new state, dispatch )
dispatch = change our state

//
import {useReducer } form 'react'
//const initialState = 5;
const initialState = {
		initialValue : 5
		};
const reduser = (state, action) => {
	switch(action.type){
		case 'increment':
			returen state.initialValue + action.count;
		case 'decrement':
			return state.initialValue - action.count;
		defult:
			return state;
	}
}
export default function Counter(){
	const [count,dispatch] = useReducer(reduser, initialState );
	return(
		<div>
			<div>count - {count.initialValue}</div>
			<button type='button' onclick={() => dispatch({
									type: 'increment',
									count : 1,
									})}>
				button
			</button>

			<button type='button' onclick={() => dispatch({
									type: 'decrement',
									count : 1,
									})}>
				button
			</button>
		</div>
	)
}
			
			